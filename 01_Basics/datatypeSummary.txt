Primitive
(call by value)
7 types: String, Number, Boolean, null, undefined, Symbol, BigInt

=> Is JS dynamically typed or statically typed?
JavaScript is a *dynamic language and not static, which means that variables can hold values of different types during runtime. Unlike languages such as Typescript or Java, you don't need to declare the data type of a variable explicitly

const id = Symbol('123')
const anotherId = Symbol('123')

console.log(id === anotherId); => false
As we pass the same value but it returns the unique value every time, hence returns false

const bigNumber = 3543576356426655n => BigInt datatype

Non-Primitive(Reference)
(call by Reference)
Array, Object, Functions

const animals = ["dog", "cat", "horse"]

let myObj = {
    name: john,
    age: 24, and many more 
}
inside obj => diff datatypes, array, functions, another object

const myFunc = function(){
    console.log("hello");
}

typeof => to check the datatype
**console.log(typeof null); => Object
typeof(Object) => Object : native & not implemented
typeof(Object) => function : native/host & implemented
typeof(myFunc) => function (called as functionObject)

######################################

Memory allocation in JS
=> Stack(Primitive) and Heap(Non-Primitive)
    copy                    Reference
    (creating a deep        (creating a shallow 
    copy)                   copy)
    does not affect         affects the original
    original ones           ones
----shallow copy => which shares the same refernece point

// creating a deep copy of myString
let myString = "jaipur"
let newString = myString 
newString = "delhi"

console.log(myString); // jaipur
console.log(newString); // delhi

// creating a shallow copy of Object user1
let user1 = {
    email: "user@gmail.com",
    upi: "user@ybl"
}

let user2 = user1
user2.email = "anny@gmail.com"

console.log(user1.email); // anny@gmail.com
console.log(user2.email); // anny@gmail.com